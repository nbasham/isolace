<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" 
                    "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
    <script src="../../../../scripts/jquery-1.4.js"></script>
    
    <link rel="stylesheet" href="../../../qunit.css" type="text/css" media="screen" />
    <script type="text/javascript" src="../../../qunit.js"></script>

    <script src="../../../../../../main/webapp/scripts/isolace/isolace.js"></script>
    <script src="../../../../../../main/webapp/scripts/isolace/sudoku/Util.js"></script>
    <script src="../../../../../../main/webapp/scripts/isolace/sudoku/model/Puzzle.js"></script>
    <script src="../../../../../../main/webapp/scripts/isolace/sudoku/model/BoardState.js"></script>

    <script>

    //  file:///Users/iSolace/Documents/isolace-dev/isolace-sudoku-js/src/test/webapp/scripts/isolace/sudoku/model/BoardState-test.htm
    
        var values = [8,6,4,5,3,1,2,9,7,9,5,1,6,2,7,8,4,3,2,7,3,4,8,9,6,1,5,1,4,7,9,5,6,3,8,2,3,9,6,2,4,8,5,7,1,5,8,2,1,7,3,9,6,4,6,2,5,8,1,4,7,3,9,7,1,9,3,6,5,4,2,8,4,3,8,7,9,2,1,5,6];
        var revealedIndexes = [2,7,11,12,15,18,21,23,26,29,31,34,35,36,39,40,44,45,46,49,51,54,56,60,62,64,67,68,73,77,78];
        var puzzle = new ISOLACE.sudoku.Puzzle(values, revealedIndexes);
        var initialState = puzzle.getInitialState();
        var state = new ISOLACE.sudoku.BoardState(initialState);

        $(document).ready(function() {
            
            module("isolace/sudoku/model/BoardState");
            
            test("constructor", function() {
                ok(state, "State instanciated");
                for(var i = 0; i < 81; i++) {
                    equals(state.state[i], initialState[i]);
                }
            });
            
            test("isEditable", function() {
                for(var i = 0; i < 81; i++) {
                    if($.inArray(i, revealedIndexes) == -1) {
                        ok(state.isEditable(i), "isEditable true");
                    } else {
                        ok(!state.isEditable(i), "isEditable false");
                    }
                }
            });

            test("setValue", function() {
                state.setValue(6, 0);
                equals(state.getValue(0), 6, "setValue set value");
                state.setValue(values[0], 0);
            });

            test("setValue toggle", function() {
                state.setValue(6, 0);
                state.setValue(6, 0);
                equals(state.getValue(0), 0, "setValue reset to zero");
                state.setValue(values[0], 0);
            });

            test("setValue over marker", function() {
                state.setMarkerValue(6, 0);
                state.setValue(6, 0);
                equals(state.getValue(0), 6, "setValue set value");
                state.setValue(values[0], 0);
            });

            test("setValue on revealed", function() {
                var gotExpectedException = false;
                try {
                    state.setValue(6, revealedIndexes[0]);
                } catch(err) {
                    gotExpectedException = true;
                }
                equals(state.getValue(revealedIndexes[0]), values[revealedIndexes[0]], "Value should not be changed");
                ok(gotExpectedException, "Got expected exception");
            });

            test("setValue out of range", function() {
                var gotExpectedException = false;
                try {
                    state.setValue(6, -1);
                } catch(err) {
                    gotExpectedException = true;
                }
                ok(gotExpectedException, "Got expected exception below lower bounds");
                try {
                    state.setValue(6, 81);
                } catch(err) {
                    gotExpectedException = true;
                }
                ok(gotExpectedException, "Got expected exception above upper bounds");
            });

            test("setMarkerValue", function() {
                state.setMarkerValue(6, 0);
                ok(state.hasMarkerValue(6, 0), "hasMarkerValue true");
                state.setValue(values[0], 0);
            });

            test("setMarkerValue false", function() {
                state.setMarkerValue(6, 0);
                ok(!state.hasMarkerValue(5, 0), "hasMarkerValue false");
                state.setValue(values[0], 0);
            });

            test("setMarkerValue toggle", function() {
                state.setMarkerValue(6, 0);
                state.setMarkerValue(6, 0);
                ok(!state.hasMarkerValue(6, 0), "hasMarkerValue is toggled");
                state.setValue(values[0], 0);
            });

            test("setMarkerValue over guess", function() {
                state.setValue(6, 0);
                state.setMarkerValue(6, 0);
                ok(state.hasMarkerValue(6, 0), "hasMarkerValue true");
                state.setValue(values[0], 0);
            });

            test("hasMarker", function() {
                state.setMarkerValue(6, 0);
                ok(state.hasMarker(0), "hasMarker true");
                state.setValue(values[0], 0);
            });

            test("hasMarker false", function() {
                ok(!state.hasMarker(revealedIndexes[0]), "hasMarker false");
            });

            test("hasMarker false revealed", function() {
                ok(!state.hasMarker(revealedIndexes[0]), "hasMarker false, cell revealed");
            });

            test("hasMarkerValue", function() {
                state.setMarkerValue(6, 0);
                ok(state.hasMarkerValue(6, 0), "hasMarkerValue of 6");
                state.setValue(values[0], 0);
            });

            test("hasMarkerValue false", function() {
                state.setMarkerValue(6, 0);
                ok(!state.hasMarkerValue(5, 0), "hasMarkerValue of 6, but not 5");
                state.setValue(values[0], 0);
            });

            test("hasMarkerValue", function() {
                state.setMarkerValue(6, 0);
                ok(state.hasMarkerValue(6, 0), "hasMarkerValue of 6");
                state.setValue(values[0], 0);
            });

            test("hasMarkerValue no marker", function() {
                ok(!state.hasMarkerValue(6, 0), "hasMarkerValue is false when no marker exists");
            });

            test("conflicts false", function() {
                ok(!state.conflicts(values[0], 0), "No conflict");
            });
            
            test("conflicts row", function() {
                var value = 9;
                ok(state.conflicts(value, 0), "Row conflict");
            });
            
            test("conflicts col", function() {
                ok(state.conflicts(values[0], 72), "Column conflict");
            });
            
            test("conflicts grid", function() {
                ok(state.conflicts(values[0], 20), "Grid conflict");
            });

        });

    </script>

</head>

<body>
    <h1 id="qunit-header">Sudoku JavaScript Unit Tests</h1>
    <h2 id="qunit-banner"></h2>
    <h2 id="qunit-userAgent"></h2>
    <ol id="qunit-tests"></ol>
</body>

</html>