<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
                    "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>

<script src="http://code.jquery.com/jquery-latest.js"></script>
<link rel="stylesheet" href="http://dev.jquery.com/view/trunk/qunit/testsuite.css" type="text/css" media="screen" />

<script src="isolace.js"></script>
<script src="sudoku-service.js"></script>

<script>

var problem = [8,6,4,5,3,1,2,9,7,9,5,1,6,2,7,8,4,3,2,7,3,4,8,9,6,1,5,1,4,7,9,5,6,3,8,2,3,9,6,2,4,8,5,7,1,5,8,2,1,7,3,9,6,4,6,2,5,8,1,4,7,3,9,7,1,9,3,6,5,4,2,8,4,3,8,7,9,2,1,5,6];
var mask = [2,7,11,12,15,18,21,23,26,29,31,34,35,36,39,40,44,45,46,49,51,54,56,60,62,64,67,68,73,77,78];
$s.initialize(problem, mask);

$(document).ready(function(){
    
module("API");

test("check if public API is defined", function() {
     ok( $s != undefined, "$s defined" );
     ok( $s.initialize != undefined, "$s.initialize defined" );
     ok( $s.getSolution != undefined, "$s.getSolution defined" );
     ok( $s.guess != undefined, "$s.guess defined" );
     ok( $s.hasHint != undefined, "$s.hasHint defined" );
     ok( $s.setHint != undefined, "$s.setHint defined" );
});

test("check if private API is defined", function() {
     ok( $s.getRowFromIndex != undefined, "$s.getRowFromIndex defined" );
     ok( $s.getColFromIndex != undefined, "$s.getColFromIndex defined" );
     ok( $s.getGridFromIndex != undefined, "$s.getGridFromIndex defined" );
     ok( $s.getGridIndexes != undefined, "$s.getGridIndexes defined" );
     ok( $s.uniqueInRow != undefined, "$s.uniqueInRow defined" );
     ok( $s.uniqueInCol != undefined, "$s.uniqueInCol defined" );
     ok( $s.uniqueInGrid != undefined, "$s.uniqueInGrid defined" );
});

module("API implementations");

test("getSolution() length", function() {
    var solution = $s.getSolution();
    ok(solution.length == 81, "Solution length is 81.");
});

test("getSolution()", function() {
    var solution = $s.getSolution();
    var allEqual = true;
    for(var i = 0; i < solution.length; i++) {
        if(solution[i] != 0) {
            if(solution[i] != problem[i]) {
                allEqual = false;
                break;
            }
        }
    }
    ok(allEqual, "Solution properly initiated.");
});

test("guess", function() {
    $s.initialize(problem, mask);
    $s.guess(0, 3);
    equals($s.getSolution(0), 3);
});
test("guess over hint", function() {
    $s.initialize(problem, mask);
    $s.setHint(0, 3);
    $s.guess(0, 3);
    equals($s.getSolution(0), 3);
});
test("guess removes hints of same value in grid", function() {
    $s.initialize(problem, mask);
    $s.setHint(0, 3);
    $s.guess(0, 3);
    equals($s.getSolution(0), 3);
});

module("Private Sudoku utility functions");

test("uniqueInRow", function() {
    $s.initialize(problem, mask);
    var solution = $s.getSolution();
    equals($s.uniqueInRow(solution, 0, 8), true);
});

test("uniqueInRow false", function() {
    $s.initialize(problem, mask);
    $s.guess(0, 8);
    var solution = $s.getSolution();
    equals($s.uniqueInRow(solution, 4, 8), false);
});

test("uniqueInCol", function() {
    $s.initialize(problem, mask);
    var solution = $s.getSolution();
    equals($s.uniqueInCol(solution, 0, 1), true);
});

test("uniqueInCol false", function() {
    $s.initialize(problem, mask);
    $s.guess(0, 3);
    var solution = $s.getSolution();
    equals($s.uniqueInCol(solution, 18, 3), false);
});

test("getGridIndexes 0", function() {
    var a = $s.getGridIndexes(0);
    var grid0Index = [0, 1, 2, 9, 10, 11, 18, 19, 20];
    same(a, grid0Index);
});

test("getGridIndexes 8", function() {
    var a = $s.getGridIndexes(8);
    var grid0Index = [60, 61, 62, 69, 70, 71, 78, 79, 80];
    same(a, grid0Index);
});

test("uniqueInGrid", function() {
    $s.initialize(problem, mask);
    var solution = $s.getSolution();
    equals($s.uniqueInGrid(solution, 0, 8), true);
});

test("uniqueInGrid false", function() {
    $s.initialize(problem, mask);
    $s.guess(0, 3);
    var solution = $s.getSolution();
    equals($s.uniqueInGrid(solution, 18, 3), false);
});

test("getRowFromIndex", function() {
    for(var row = 0; row < 9; row++) {
        for(var col = 0; col < 9; col++) {
            var i = row*9 + col;
            equals($s.getRowFromIndex(i), row);
        }
    }
});

test("getColFromIndex", function() {
    for(var row = 0; row < 9; row++) {
        for(var col = 0; col < 9; col++) {
            var i = row*9 + col;
            equals($s.getColFromIndex(i), col);
        }
    }
});


test("getGridFromIndex", function() {
    for(var row = 0; row < 9; row++) {
        for(var col = 0; col < 9; col++) {
            var i = row*9 + col;
            var grid = $s.getGridFromIndex(i);
            var gridText = '' + grid;
            ok(true, gridText);
        }
    }
});

});

</script>

</head>
<body>

<script type="text/javascript" src="http://jqueryjs.googlecode.com/svn/trunk/qunit/testrunner.js"></script>
<h1>iSolace sudoku-service unit tests</h1>
<h2 id="banner"></h2>
<h2 id="userAgent"></h2>

<ol id="tests"></ol>

<div id="main"></div>

</body>
</html>
